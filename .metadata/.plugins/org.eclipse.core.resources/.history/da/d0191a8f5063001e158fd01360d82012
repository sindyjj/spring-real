package com.spring.basic.score.repository;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.spring.basic.score.entity.Score;

@Repository("jdbc")
public class ScoreJdbcRepository implements IScoreRepository {
	
	// 데이터베이스 접속에 필요한 정보들을 변수화. (데이터베이스 주소, 계정명, 비밀번호)
	private String url = "jdbc:oracle:thin://locahost:1521:xe";
	private String username = "hr";
	private String password = "hr";
	
	//데이터베이스 연동을 전담하는 객체는 무분별한 객체 생성을 막기 위해
	//싱클톤 디자인 패턴을 구축하는 것이 일반적.
	//우리는 spring framework를 사용 중 -> 컨테이너 내의 객체들을 기본적으로 singleton으로 유지.
	
	
	//객체가 생성될 때 오라클 데이터베이스 커넥터 드라이버를 강제 구동해서 연동 준비.
	public ScoreJdbcRepository() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} 
	}
	
	@Override
	public List<Score> findAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void save(Score score) {
		// TODO Auto-generated method stub

	}

	@Override
	public Score findByStuNum(int stuNum) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteBystuNum(int stuNum) {
		// TODO Auto-generated method stub

	}

	@Override
	public void modify(Score modScore) {
		// TODO Auto-generated method stub

	}

}
